/*
 * TesteGraph3.java
 *
 * Created on 20/03/2010, 22:54:35
 */
package testeswing;

import java.awt.Color;
import org.jdesktop.swingx.JXGraph.Plot;

/**
 *
 * @author rafael
 */
public class TesteGraph3 extends javax.swing.JFrame {

    /** Creates new form TesteGraph3 */
    public TesteGraph3() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        graph = new org.jdesktop.swingx.JXGraph();
        pnlControle = new javax.swing.JPanel();
        lblA = new javax.swing.JLabel();
        spnA = new javax.swing.JSpinner();
        lblX0 = new javax.swing.JLabel();
        spnX0 = new javax.swing.JSpinner();
        lblY0 = new javax.swing.JLabel();
        spnY0 = new javax.swing.JSpinner();
        lblB = new javax.swing.JLabel();
        spnB = new javax.swing.JSpinner();
        lblF = new javax.swing.JLabel();
        spnF = new javax.swing.JSpinner();
        btnReset = new javax.swing.JButton();
        pnlEquacao = new javax.swing.JPanel();
        lblEquacao = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Teste de Gaussiana");
        setMinimumSize(new java.awt.Dimension(400, 500));
        getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        graph.setMajorX(0.5);
        graph.setMajorY(0.5);
        graph.setMinorCountX(5);
        graph.setMinorCountY(5);
        graph.setView(new java.awt.geom.Rectangle2D.Double(-2.0, -2.0, 4.0, 4.0));

        javax.swing.GroupLayout graphLayout = new javax.swing.GroupLayout(graph);
        graph.setLayout(graphLayout);
        graphLayout.setHorizontalGroup(
            graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 544, Short.MAX_VALUE)
        );
        graphLayout.setVerticalGroup(
            graphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 363, Short.MAX_VALUE)
        );

        getContentPane().add(graph, java.awt.BorderLayout.CENTER);
        graph.addPlots(Color.RED, this.plot);

        pnlControle.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlControle.setPreferredSize(new java.awt.Dimension(400, 110));
        pnlControle.setLayout(new java.awt.GridBagLayout());

        lblA.setLabelFor(spnA);
        lblA.setText("A = ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlControle.add(lblA, gridBagConstraints);

        spnA.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.0d, 2.0d, 0.01d));
        spnA.setEditor(new javax.swing.JSpinner.NumberEditor(spnA, "0.00"));
        spnA.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnAStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        pnlControle.add(spnA, gridBagConstraints);
        ExpandedSpinnerListener.bindSpinner(spnA);

        lblX0.setLabelFor(spnX0);
        lblX0.setText("<html>x<sub>0</sub> = </html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        pnlControle.add(lblX0, gridBagConstraints);

        spnX0.setModel(new javax.swing.SpinnerNumberModel(0.0d, -1.0d, 1.0d, 0.01d));
        spnX0.setEditor(new javax.swing.JSpinner.NumberEditor(spnX0, "0.00"));
        spnX0.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnX0StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        pnlControle.add(spnX0, gridBagConstraints);
        ExpandedSpinnerListener.bindSpinner(spnX0);

        lblY0.setLabelFor(spnY0);
        lblY0.setText("<html>y<sub>0</sub> = </html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlControle.add(lblY0, gridBagConstraints);

        spnY0.setModel(new javax.swing.SpinnerNumberModel(0.0d, -1.0d, 1.0d, 0.01d));
        spnY0.setEditor(new javax.swing.JSpinner.NumberEditor(spnY0, "0.00"));
        spnY0.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnY0StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        pnlControle.add(spnY0, gridBagConstraints);
        ExpandedSpinnerListener.bindSpinner(spnY0);

        lblB.setLabelFor(spnB);
        lblB.setText("B =");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        pnlControle.add(lblB, gridBagConstraints);

        spnB.setModel(new javax.swing.SpinnerNumberModel(0.0d, -1.0d, 1.0d, 0.01d));
        spnB.setEditor(new javax.swing.JSpinner.NumberEditor(spnB, "0.00"));
        spnB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnBStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        pnlControle.add(spnB, gridBagConstraints);
        ExpandedSpinnerListener.bindSpinner(spnB);

        lblF.setLabelFor(spnF);
        lblF.setText("f = ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        pnlControle.add(lblF, gridBagConstraints);

        spnF.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spnF.setEditor(new javax.swing.JSpinner.NumberEditor(spnF, "0.00"));
        spnF.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnFStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        pnlControle.add(spnF, gridBagConstraints);
        ExpandedSpinnerListener.bindSpinner(spnF, 1.0);

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        pnlControle.add(btnReset, gridBagConstraints);

        getContentPane().add(pnlControle, java.awt.BorderLayout.SOUTH);

        pnlEquacao.setPreferredSize(new java.awt.Dimension(400, 28));

        lblEquacao.setText("<html> y(x) = A * cos(x * f * PI / 2) * e<sup>-(x - x<sub>0</sub>)<sup>2</sup></sup> + B * x + y<sub>0</sub><html>");
        lblEquacao.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnlEquacao.add(lblEquacao);
        lblEquacao.getAccessibleContext().setAccessibleName("lblEquacao");

        getContentPane().add(pnlEquacao, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void spnAStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnAStateChanged
        this.plot.setA((Double) this.spnA.getValue());
    }//GEN-LAST:event_spnAStateChanged

    private void spnX0StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnX0StateChanged
        this.plot.setX0((Double) this.spnX0.getValue());
    }//GEN-LAST:event_spnX0StateChanged

    private void spnY0StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnY0StateChanged
        this.plot.setY0((Double) this.spnY0.getValue());
    }//GEN-LAST:event_spnY0StateChanged

    private void spnBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnBStateChanged
        this.plot.setB((Double) this.spnB.getValue());
    }//GEN-LAST:event_spnBStateChanged

    private void spnFStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnFStateChanged
        this.plot.setF((Double) this.spnF.getValue());
    }//GEN-LAST:event_spnFStateChanged

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        this.spnA.setValue(1.0);
        this.spnB.setValue(0.0);
        this.spnF.setValue(1.0);
        this.spnX0.setValue(0.0);
        this.spnY0.setValue(0.0);
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TesteGraph3().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private org.jdesktop.swingx.JXGraph graph;
    private javax.swing.JLabel lblA;
    private javax.swing.JLabel lblB;
    private javax.swing.JLabel lblEquacao;
    private javax.swing.JLabel lblF;
    private javax.swing.JLabel lblX0;
    private javax.swing.JLabel lblY0;
    private javax.swing.JPanel pnlControle;
    private javax.swing.JPanel pnlEquacao;
    private javax.swing.JSpinner spnA;
    private javax.swing.JSpinner spnB;
    private javax.swing.JSpinner spnF;
    private javax.swing.JSpinner spnX0;
    private javax.swing.JSpinner spnY0;
    // End of variables declaration//GEN-END:variables
    private GaussianaPlot plot = new GaussianaPlot();
}

class GaussianaPlot extends Plot {

    private static final double CONST = Math.PI / 2;
    private double a = 1.0;
    private double b = 0.0;
    private double f = 1.0;
    private double x0 = 0.0;
    private double y0 = 0.0;

    public void setA(double a) {
        double oldA = this.a;
        this.a = a;
        super.firePropertyChange("A", oldA, this.a);
    }

    public void setB(double b) {
        double oldB = this.b;
        this.b = b;
        super.firePropertyChange("B", oldB, this.b);
    }

    public void setF(double f) {
        double oldF = this.f;
        this.f = f;
        super.firePropertyChange("f", oldF, this.f);
    }

    public void setX0(double x0) {
        double oldX0 = this.x0;
        this.x0 = x0;
        super.firePropertyChange("x0", oldX0, this.x0);
    }

    public void setY0(double y0) {
        double oldY0 = this.y0;
        this.y0 = y0;
        super.firePropertyChange("y0", oldY0, this.y0);
    }

    public void reset() {
        this.setA(1.0);
        this.setB(0.0);
        this.setF(1.0);
        this.setX0(0.0);
        this.setY0(0.0);
    }

    @Override
    public double compute(double x) {
        double deltaX = x - this.x0;
        double frequencia = x * f * CONST;
        return this.a * Math.exp(-deltaX * deltaX) * Math.cos(frequencia) + this.b * x + this.y0;
    }
}
