package jxSpinner;

import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.border.TitledBorder;

/**
 *
 * @author rafael
 */
public class SliderSpinner extends JPanel {

    public static enum SpinnerPosition {

        BEGIN {

            @Override
            Object getBorderPosition(Orientation orientation) {
                return (orientation == Orientation.HORIZONTAL)? BorderLayout.WEST: BorderLayout.NORTH;
            }
        },
        END {

            @Override
            Object getBorderPosition(Orientation orientation) {
                return (orientation == Orientation.HORIZONTAL)? BorderLayout.EAST: BorderLayout.SOUTH;
            }
        };

        abstract Object getBorderPosition(Orientation orientation);
    }

    public static enum Orientation {

        HORIZONTAL(JSlider.HORIZONTAL), VERTICAL(JSlider.VERTICAL);
        private final int sliderOrientation;

        private Orientation(int sliderOrientation) {
            this.sliderOrientation = sliderOrientation;
        }

        int getSliderOrientation() {
            return sliderOrientation;
        }
    }
    public static final String PROP_TITULO = "titulo";
    public static final String PROP_ORDER = "order";
    public static final String PROP_SLIDER_POSITION = "sliderPosition";

    /** Creates new form BeanForm */
    public SliderSpinner() {
        this.sliderPosition = SpinnerPosition.END;
        this.orientation = Orientation.HORIZONTAL;
        initComponents();
    }

    private TitledBorder getTitledBorder() {
        return (TitledBorder) this.getBorder();
    }

    private Dimension invertDimension(Dimension d) {
        return new Dimension(d.height, d.width);
    }

    private void changeOrientation() {
        this.slider.setOrientation(this.getOrientation().getSliderOrientation());
        this.slider.setSize(this.invertDimension(this.slider.getSize()));
        this.slider.setMaximumSize(this.invertDimension(this.slider.getMaximumSize()));
        this.slider.setMinimumSize(this.invertDimension(this.slider.getMinimumSize()));

        changeOrder();
    }

    private void changeOrder() {
        this.remove(this.pnlSlider);
        this.add(this.pnlSlider, this.getSliderPosition().getBorderPosition(this.getOrientation()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        slider = new javax.swing.JSlider();
        pnlSlider = new javax.swing.JPanel();
        spinner = new javax.swing.JSpinner();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        setLayout(new java.awt.BorderLayout(5, 5));

        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setMinimumSize(new java.awt.Dimension(200, 31));
        add(slider, java.awt.BorderLayout.CENTER);

        pnlSlider.add(spinner);

        add(pnlSlider, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlSlider;
    private javax.swing.JSlider slider;
    private javax.swing.JSpinner spinner;
    // End of variables declaration//GEN-END:variables
    private SpinnerPosition sliderPosition;
    private Orientation orientation;

    public String getTitulo() {
        return this.getTitledBorder().getTitle();
    }

    public void setTitulo(String titulo) {
        String oldValue = this.getTitledBorder().getTitle();
        this.getTitledBorder().setTitle(titulo);
        super.repaint();
        super.firePropertyChange(PROP_TITULO, oldValue, titulo);
    }

    public SpinnerPosition getSliderPosition() {
        return sliderPosition;
    }

    public void setSliderPosition(SpinnerPosition order) {
        if (order != this.sliderPosition) {
            Object oldValue = this.sliderPosition;
            this.sliderPosition = order;
            super.firePropertyChange(PROP_ORDER, oldValue, this.sliderPosition);
            this.changeOrder();
        }
    }

    public Orientation getOrientation() {
        return orientation;
    }

    public void setOrientation(Orientation orientation) {
        if (this.orientation != orientation) {
            Object oldValue = this.orientation;
            this.orientation = orientation;
            super.firePropertyChange(PROP_SLIDER_POSITION, oldValue, this.orientation);
            this.changeOrientation();
        }
    }
}
