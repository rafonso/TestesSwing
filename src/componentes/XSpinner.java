/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * XSpinner.java
 *
 * Created on 27/03/2010, 10:54:00
 */

package componentes;

import javax.swing.JPanel;
import javax.swing.JSpinner.NumberEditor;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author rafael
 */
public class XSpinner extends JPanel {
    public static final String PROP_EXTENDED_STEP = "extendedStep";
    public static final String PROP_MAXIMUM = "maximum";
    public static final String PROP_MINIMUM = "minimum";
    public static final String PROP_PATTERN = "pattern";
    public static final String PROP_STEP = "step";
    public static final String PROP_TITLE = "title";
    public static final String PROP_VALUE = "value";

    /** Creates new form BeanForm */
    public XSpinner() {
        super();
        initComponents();
    }

    private void alterarTipo(Number step) {
        if ((step instanceof Double) && (this.getValue() instanceof Integer)) {
            this.value = new Double(this.getValue().doubleValue());
            this.maximum = new Double(this.getMaximum().doubleValue());
            this.minimum = new Double(this.getMinimum().doubleValue());

            this.model.setValue(this.value);
            this.model.setMaximum((Comparable) this.maximum);
            this.model.setMinimum((Comparable) this.minimum);
        } else if ((step instanceof Integer) && (this.getValue() instanceof Double)) {
            this.value = new Integer(this.getValue().intValue());
            this.maximum = new Integer(this.getMaximum().intValue());
            this.minimum = new Integer(this.getMinimum().intValue());

            this.model.setValue(this.value);
            this.model.setMaximum((Comparable) this.maximum);
            this.model.setMinimum((Comparable) this.minimum);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        lblIgual = new javax.swing.JLabel();
        spinner = new javax.swing.JSpinner();

        lblTitulo.setText("VALUE");

        lblIgual.setText("=");

        this.model = new SpinnerNumberModel(0, -10, 10, 1);
        spinner.setModel(this.model);
        this.editor = new NumberEditor(this.spinner, "0");
        spinner.setEditor(this.editor);
        spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(4, 4, 4)
                .add(lblTitulo)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblIgual)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblIgual)
                    .add(lblTitulo)
                    .add(spinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        this.spinnerListener = new XSpinnerListener();
        spinner.addMouseWheelListener(this.spinnerListener);
        ((NumberEditor)this.spinner.getEditor()).getTextField().addKeyListener(this.spinnerListener);
        this.spinnerListener.setExtendedStep(this.getExtendedStep());
    }// </editor-fold>//GEN-END:initComponents

    private void spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerStateChanged
        System.out.println(evt);
        this.setValue((Number) this.model.getValue());
    }//GEN-LAST:event_spinnerStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblIgual;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JSpinner spinner;
    // End of variables declaration//GEN-END:variables
    private NumberEditor editor;
    private SpinnerNumberModel model;
    private XSpinnerListener spinnerListener;

    private Number value = 0;
    private Number step = 1;
    private Number extendedStep = 1;
    private Number minimum = 0;
    private Number maximum = 0;
    private String pattern;
    private String title = "Value";


    public Number getExtendedStep() {
        return extendedStep;
    }

    public void setExtendedStep(Number extendedStep) {
        Number oldValue = this.extendedStep;
        this.extendedStep = extendedStep;
        this.spinnerListener.setExtendedStep(extendedStep);
        super.firePropertyChange( PROP_EXTENDED_STEP, oldValue, this.extendedStep);
    }

    public Number getMaximum() {
        return maximum;
    }

    public void setMaximum(Number maximum) {
        Number oldValue = this.maximum;
        this.maximum = maximum;
        this.model.setMaximum((Comparable) maximum);
        super.firePropertyChange( PROP_MAXIMUM, oldValue, this.maximum);
    }

    public Number getMinimum() {
        return minimum;
    }

    public void setMinimum(Number minimum) {
        Number oldValue = this.minimum;
        this.minimum = minimum;
        this.model.setMinimum((Comparable) minimum);
        super.firePropertyChange( PROP_MINIMUM, oldValue, this.minimum);
    }

    public String getNumberPattern() {
        return pattern;
    }

    public void setNumberPattern(String numberPattern) {
        String oldValue = this.pattern;
        this.pattern = numberPattern;
        this.editor = new NumberEditor(spinner, this.pattern);
        this.spinner.setEditor(editor);
        super.firePropertyChange( PROP_PATTERN, oldValue, this.pattern);
    }

    public Number getStep() {
        return step;
    }

    public void setStep(Number step) {
        Number oldValue = this.step;
        this.step = step;
        this.model.setStepSize(this.step);
        alterarTipo(step);
        super.firePropertyChange( PROP_STEP, oldValue, this.step);
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        String oldValue = this.title;
        this.title = title;
        this.lblTitulo.setText(this.title);
        super.firePropertyChange( PROP_TITLE, oldValue, this.title);
    }

    public Number getValue() {
        return value;
    }

    public void setValue(Number value) {
        Number oldValue = this.value;
        this.value = value;
        this.model.setValue(this.value);
        super.firePropertyChange( PROP_VALUE, oldValue, this.value);
    }

}
