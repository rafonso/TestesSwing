/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SliderSpinner.java
 *
 * Created on 01/04/2010, 22:50:45
 */
package componentes;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JSpinner.NumberEditor;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.TitledBorder;

/**
 *
 * @author rafael
 */
public class SliderSpinner extends javax.swing.JPanel implements PropertyChangeListener {

    public static final String PROP_EXTENDED_STEP = "extendedStep";
    public static final String PROP_MAXIMUM = "maximum";
    public static final String PROP_MINIMUM = "minimum";
    public static final String PROP_PATTERN = "pattern";
    public static final String PROP_STEP = "step";
    public static final String PROP_TITLE = "title";
    public static final String PROP_VALUE = "value";
    private Number value = 0;
    private Number step = 1;
    private Number extendedStep = 1;
    private Number minimum = 0;
    private Number maximum = 0;
    private String pattern;
    private String title = "Value";

    /** Creates new form SliderSpinner */
    public SliderSpinner() {
        initComponents();
        super.addPropertyChangeListener(this);
    }

    private void enableSlider() {
        this.slider.setEnabled((this.getMinimum() != null) && (this.getMaximum() != null));
    }

    private int valueToSliderPos() {
        Integer deltaPos = null;

        if (this.getValue() instanceof Integer) {
            int num1 = (this.getValue().intValue() - this.getMinimum().intValue());
            int num2 = (this.slider.getMaximum() - this.slider.getMinimum());
            int deltaValues = (this.getMaximum().intValue() - this.getMinimum().intValue());
            deltaPos = num1 * num2 / deltaValues;
        } else {
            double num1 = (this.getValue().doubleValue() - this.getMinimum().doubleValue());
            double num2 = (this.slider.getMaximum() - this.slider.getMinimum());
            double deltaValues = (this.getMaximum().doubleValue() - this.getMinimum().doubleValue());
            deltaPos = (int) (num1 * num2 / deltaValues);
        }

        return deltaPos + this.slider.getMinimum();
    }

    private Number sliderPosToValue() {
        Number newValue = null;

        int num1 = this.slider.getValue() - this.slider.getMinimum();
        int deltaSlider = this.slider.getMaximum() - this.slider.getMinimum();
        if (this.getValue() instanceof Integer) {
            int num2 = this.getMaximum().intValue() - this.getMinimum().intValue();
            newValue = num1 * num2 / deltaSlider + this.slider.getMinimum();
        } else {
            double num2 = this.getMaximum().doubleValue() - this.getMinimum().doubleValue();
            newValue = num1 * num2 / deltaSlider + this.slider.getMinimum();
        }

        return newValue;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        slider = new javax.swing.JSlider();
        spinner = new javax.swing.JSpinner();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        setLayout(new java.awt.GridBagLayout());

        slider.setMajorTickSpacing(10);
        slider.setPaintTicks(true);
        slider.setEnabled(false);
        slider.setMinimumSize(new java.awt.Dimension(360, 31));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(slider, gridBagConstraints);

        this.model = new SpinnerNumberModel(0, -10, 10, 1);
        this.editor = new NumberEditor(this.spinner, "0");
        this.spinnerListener = new XSpinnerListener();

        spinner.addMouseWheelListener(this.spinnerListener);
        ((NumberEditor)this.spinner.getEditor()).getTextField().addKeyListener(this.spinnerListener);
        this.spinnerListener.setExtendedStep(this.getExtendedStep());
        spinner.setModel(this.model);
        spinner.setEditor(this.editor);
        spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(spinner, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerStateChanged
        this.setValue((Number) this.spinner.getValue());
    }//GEN-LAST:event_spinnerStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider slider;
    private javax.swing.JSpinner spinner;
    // End of variables declaration//GEN-END:variables
    private NumberEditor editor;
    private SpinnerNumberModel model;
    private XSpinnerListener spinnerListener;

    public Number getExtendedStep() {
        return extendedStep;
    }

    public void setExtendedStep(Number extendedStep) {
        Number oldValue = this.extendedStep;
        this.extendedStep = extendedStep;
        this.spinnerListener.setExtendedStep(extendedStep);
        super.firePropertyChange(PROP_EXTENDED_STEP, oldValue, this.extendedStep);
    }

    public Number getMaximum() {
        return maximum;
    }

    public void setMaximum(Number maximum) {
        Number oldValue = this.maximum;
        this.maximum = maximum;
        this.model.setMaximum((Comparable) maximum);
        super.firePropertyChange(PROP_MAXIMUM, oldValue, this.maximum);
    }

    public Number getMinimum() {
        return minimum;
    }

    public void setMinimum(Number minimum) {
        Number oldValue = this.minimum;
        this.minimum = minimum;
        this.model.setMinimum((Comparable) minimum);
        super.firePropertyChange(PROP_MINIMUM, oldValue, this.minimum);
    }

    public String getNumberPattern() {
        return pattern;
    }

    public void setNumberPattern(String numberPattern) {
        String oldValue = this.pattern;
        this.pattern = numberPattern;
        this.editor = new NumberEditor(spinner, this.pattern);
        this.spinner.setEditor(editor);
        super.firePropertyChange(PROP_PATTERN, oldValue, this.pattern);
    }

    public Number getStep() {
        return step;
    }

    public void setStep(Number step) {
        Number oldValue = this.step;
        this.step = step;
        this.model.setStepSize(this.step);
        super.firePropertyChange(PROP_STEP, oldValue, this.step);
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        String oldValue = this.title;
        this.title = title;
        ((TitledBorder) this.getBorder()).setTitle(this.title);
        //super.repaint();
        super.firePropertyChange(PROP_TITLE, oldValue, this.title);
    }

    public Number getValue() {
        return value;
    }

    public void setValue(Number value) {
        Number oldValue = this.value;
        this.value = value;
        this.model.setValue(this.value);
        super.firePropertyChange(PROP_VALUE, oldValue, this.value);
    }

    private void changeType(boolean isInteger) {
        if (isInteger) {
            this.setValue(this.getValue().intValue());
            if (this.getMinimum() != null) {
                this.setMinimum(this.getMinimum().intValue());
            }
            if (this.getMaximum() != null) {
                this.setMaximum(this.getMaximum().intValue());
            }
            if (this.getExtendedStep() != null) {
                this.setExtendedStep(this.getExtendedStep().intValue());
            }
        } else {
            this.setValue(this.getValue().doubleValue());
            if (this.getMinimum() != null) {
                this.setMinimum(this.getMinimum().doubleValue());
            }
            if (this.getMaximum() != null) {
                this.setMaximum(this.getMaximum().doubleValue());
            }
            if (this.getExtendedStep() != null) {
                this.setExtendedStep(this.getExtendedStep().doubleValue());
            }
        }
    }

    public void propertyChange(PropertyChangeEvent evt) {
//        System.out.println(evt.getPropertyName() + " changed from " + evt.getOldValue() + " to " + evt.getNewValue());
        if (evt.getPropertyName().equals(PROP_STEP) && (evt.getOldValue().getClass() != evt.getNewValue().getClass())) {
            this.changeType(evt.getNewValue().getClass() == Integer.class);
        } else if (evt.getPropertyName().equals(PROP_MAXIMUM)) {
            this.enableSlider();
        } else if (evt.getPropertyName().equals(PROP_MINIMUM)) {
            this.enableSlider();
        }
    }
}
